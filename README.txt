Get use to working in .txt files, .py files, and .csv files. They are some of the most useful and efficient file formats available. 
(Most people will open this file in Notepad or some other text editor, and I recommend you use the 'Word Wrap' function found under Format. I am not sure about other programs, but I presume they automatically wrap words into separate lines or offer a similar tool under formatting or view menu tabs.)

For coding, I do NOT recommend basic Notepad. Atom is a good coding editor for a variety of languages (https://atom.io/) and does not take up too much space on your computer. I stick to terminal based work for the python introduction and transition to working in Jupyter Notebooks for the numerical methods lessons.

Learning to code in a terminal, or at least learning to execute code in a terminal, is an important skill for the modern researcher. Whether you need to communicate with an instrument through COM ports, access a database via ssh, or  edit a large program on a supercomputer, knowledge of terminal navigation is paramount.

This tutorial will begin with an introduction to coding and python in general, through the terminal and with .py files. After a basic understanding of the language and usage, I focus more on the physics problems we can solve with coding. Once you have a grasp on the python language, your 'usefulness' as a researcher will be correlated with not only how well you can understand the problem at hand, but also how effectively you can translate the solution into code. Therefore, instead of esoteric explanations of why the code works the way it does, I want to provide examples and problems and let YOU solve them. Although, I know how irksome and annoying it can be to not have a way to test your solutions. Therefore, I will do my best to provide solutions and the correct code in seperate files. 

NOTE: You will only grow as a coder if you give effort on the exercises. Coding is a beautiful rabbit hole of challenge and satisfaction. But the most true coding adage is GIGO: Garbage In Garbage Out. Generally used in regards to data processing, I think it applies to every coder's effort and work ethic as well. So please, do yourself a favor: don't spend half of your brain power scrolling social media and half of it trying to type code. I mean, my code works maybe a third of the time when I am putting 100% of my focus into it! But eventually, I get there. And you will too!
