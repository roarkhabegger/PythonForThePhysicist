PYTHON FOR THE PHYSICIST (or Astronomer or Mathematician or Chemist or any field with data)
This is meant as an introductory workshop on Python coding for the sciences. Many university curricula do not require a formal coding course despite higher level science courses expecting coding knowledge. Hopefully this can serve as a bridge for 1st and 2nd year undergrads who are being faced with the challenge of using code without having formally learned it.

Get used to working in .txt files, .py files, and .csv files. They are some of the most useful file formats available, although they lack the data compression abilities of other file formats. I am going to stick to terminal/command prompt coding since this is the most open and fundamental way of coding, requiring no special programs or internet connection. However, you are more than welcome to shift to a Python coding program (PyCharm, Anaconda, Jupyter, etc.) before the Numerical Methods sections. 

If you just want a generic text editor for coding, I do NOT recommend basic Notepad. Atom is a good coding editor for a variety of languages (https://atom.io/) and does not take up too much space on your computer. Notepad++ is also a good choice. I stick to terminal based work for the python introduction and transition to working in Jupyter Notebooks for the numerical methods lessons, to help you understand the backbone of running python scripts before you us developing environments that are well removed from running code.

Learning to code in a terminal, or at least learning to execute code in a terminal, is an important skill for the modern researcher. Whether you need to communicate with an instrument through COM ports, access a database via ssh, or edit a large program on a supercomputer, knowledge of terminal navigation is paramount.

This tutorial begins with an introduction to coding and python in general, through the terminal and with .py files. After a basic understanding of the language and usage, I focus more on the physics problems we can solve with coding. Once you have a grasp on the python language, your 'usefulness' as a researcher will be correlated with not only how well you can understand the problem at hand, but also how effectively you can translate the solution into code. Therefore, instead of esoteric explanations of why the code works the way it does, I want to provide examples and problems and let YOU solve them. Initially, these problems may take a couple lines but they will evolve into open-ended algorithm design.

NOTE: You will only grow as a coder if you give effort on the exercises. Coding is a beautiful rabbit hole of challenge and satisfaction. But the most true coding adage is GIGO: Garbage In Garbage Out. Generally used in regards to data processing, I think it applies to every coder's effort and work ethic as well. So please, do yourself a favor: don't spend half of your brain power scrolling social media and half of it trying to type code. My code works maybe a third of the time when I am putting all of my focus into it! But eventually, I get there. And you will too.

To get started, open Terminal (Mac) or Command prompt (Windows) and use the "cd" command to change to the file directory you want to put this course's file in. you can use the tab button after cd to see your options for directories to move to. If you are in a weird spot, you can always use cd \Users\<YOUR USERNAME>\ (Windows) and cd ~/ (Mac) to get to your profile's home directory, with folders like Documents, Downloads, and Desktop.

Once in your preferred directory, type
git clone https://github.com/roarkhabegger/PythonForThePhysicist.git
and watch as the program downloads all the files from this Github Repository!
